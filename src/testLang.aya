public open import Data::Bool
public open import Data::Nat

open inductive TermTy | natT | boolT
def termTy (t : TermTy) : Type 0
 | natT => Nat
 | boolT => Bool
open inductive Term (n : TermTy) : Type 0
 | natT => nat Nat
 | natT => succ (Term natT)
 | boolT => bool Bool
 | boolT => inv (Term boolT)
 | A => case (Term boolT) (Term A) (Term A)
def normalize {t : TermTy} (x : Term t) : termTy t
 | nat n => n
 | succ n => suc (normalize n)
 | bool b => b
 | inv b => not (normalize b)
 | case b x y => ifElse (normalize b) (normalize x) (normalize y)

def Normalize => Fn {t : TermTy} (x : Term t) -> termTy t
