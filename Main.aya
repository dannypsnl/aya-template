open data Nat
  | zero
  | suc Nat
open data Bool
  | true
  | false

def not (x : Bool) : Bool
  | true => false
  | false => true

def ifElse {A : Type 0} (x : Bool) (a b : A) : A
  | true, a, _ => a
  | false, _, b => b

open data TermTy | natT | boolT
def termTy (t : TermTy) : Type 0
 | natT => Nat
 | boolT => Bool
open data Term (n : TermTy) : Type 0
 | natT => nat Nat
 | natT => succ (Term natT)
 | boolT => bool Bool
 | boolT => inv (Term boolT)
 | A => case (Term boolT) (Term A) (Term A)
def normalize {t : TermTy} (x : Term t) : termTy t
 | nat n => n
 | succ n => suc (normalize n)
 | bool b => b
 | inv b => not (normalize b)
 | case b x y => ifElse (normalize b) (normalize x) (normalize y)

def Normalize => Fn {t : TermTy} (x : Term t) -> termTy t
